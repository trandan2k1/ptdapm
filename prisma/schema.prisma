generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
}

model User {
  id        Int    @id @default(autoincrement())
  name      String
  username  String @unique
  password  String
  phone     String @unique
  roleId    Int
  role      Role   @relation(fields: [roleId], references: [id])

  studentId String? @unique // Mã sinh viên (chỉ áp dụng cho roleId == 1)
  classId   Int?    // Lớp của sinh viên (nếu là roleId == 1)
  class     Class?  @relation(fields: [classId], references: [id])

  // Quan hệ với các bảng khác
  ExamSessionStudent     ExamSessionStudent[]
  ExamSessionInvigilator ExamSessionInvigilator[]
  SubjectClass           SubjectClass[]
  ExamResult             ExamResult[]
  
  departmentId Int? // Liên kết với bộ môn
  department   Department? @relation(fields: [departmentId], references: [id])
  
  // Giảng viên có thể có thông tin cá nhân riêng
  PersonalInfo PersonalInfo?

  @@index([roleId])
}

model Department {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  code  String @unique
  users User[]
}

model Subject {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  subjectClasses SubjectClass[]
}

model Class {
  id         Int     @id @default(autoincrement())
  name       String  @unique
  subjectClasses SubjectClass[]
  users      User[]
}

model SubjectClass {
  id        Int    @id @default(autoincrement())
  subjectId Int
  classId   Int

  subject   Subject @relation(fields: [subjectId], references: [id])
  class     Class   @relation(fields: [classId], references: [id])
  // Liên kết đến bảng kết nối giữa phiên thi và môn học – lớp
  examSessionSubjectClasses ExamSessionSubjectClass[]
  students                  User[]
  ExamResult                ExamResult[]

  @@index([subjectId])
  @@index([classId])
}

model ExamRoom {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  examSessions  ExamSession[]
}

model ExamSession {
  id             Int      @id @default(autoincrement())
  examRoomId     Int
  startTime      DateTime // Giờ bắt đầu thi
  endTime        DateTime? // Giờ kết thúc thi (nếu có)
  status         String   // "pending", "ongoing", "completed"
  
  examRoom     ExamRoom     @relation(fields: [examRoomId], references: [id])

  // Mỗi phiên thi có thể gắn với nhiều môn học - lớp
  examSessionSubjectClasses ExamSessionSubjectClass[]
  
  // Quan hệ với các bảng ghi nhận sinh viên và giảng viên tham gia
  students    ExamSessionStudent[]
  invigilators ExamSessionInvigilator[]
  ExamResult  ExamResult[]
}

model ExamSessionSubjectClass {
  id             Int @id @default(autoincrement())
  examSessionId  Int
  subjectClassId Int

  examSession  ExamSession  @relation(fields: [examSessionId], references: [id])
  subjectClass SubjectClass @relation(fields: [subjectClassId], references: [id])

  @@unique([examSessionId, subjectClassId])
  @@index([examSessionId])
  @@index([subjectClassId])
}

model ExamSessionStudent {
  id            Int    @id @default(autoincrement())
  examSessionId Int
  userId        Int
  status        String @default("registered") // "registered", "present", "absent", "disqualified"

  examSession ExamSession @relation(fields: [examSessionId], references: [id])
  student     User        @relation(fields: [userId], references: [id])

  @@unique([examSessionId, userId])
  @@index([examSessionId])
  @@index([userId])
}

model ExamSessionInvigilator {
  id            Int    @id @default(autoincrement())
  examSessionId Int
  invigilatorId Int
  role          String @default("assistant") // "chief", "assistant"

  examSession ExamSession @relation(fields: [examSessionId], references: [id])
  invigilator User        @relation(fields: [invigilatorId], references: [id])

  @@unique([examSessionId, invigilatorId])
  @@index([examSessionId])
  @@index([invigilatorId])
}

model ExamResult {
  id             Int    @id @default(autoincrement())
  examSessionId  Int
  subjectClassId Int
  studentId      Int
  score          Float?
  status         String @default("pending") // "pending", "examined", "graded", "finalized"
  examSession  ExamSession  @relation(fields: [examSessionId], references: [id])
  subjectClass SubjectClass @relation(fields: [subjectClassId], references: [id])
  student      User         @relation(fields: [studentId], references: [id])

  @@unique([examSessionId, subjectClassId, studentId])
  @@index([examSessionId])
  @@index([subjectClassId])
  @@index([studentId])
}

model PersonalInfo {
  id        Int    @id @default(autoincrement())
  userId    Int    @unique
  email     String @unique
  address   String
  birthdate DateTime
  department String

  user User @relation(fields: [userId], references: [id])
}
